parser = import("parser.sy")

evaluate = fn (procedure) {
    numbers = []

    i = 0

    while i < length(procedure) {
        array_push(numbers, evaluate_step(procedure[i]))

        i += 1
    }

    return numbers
}

evaluate_step = fn (step) {
    if step.kind == parser.step_kind.NUMBER {
        return step.value
    } else if step.kind == parser.step_kind.BINARY_OPERATION {
        lhs = evaluate_step(step.lhs)
        rhs = evaluate_step(step.rhs)

        if step.operator == parser.binary_operator_kind.PLUS {
            return lhs + rhs
        } else if step.operator == parser.binary_operator_kind.MINUS {
            return lhs - rhs
        } else if step.operator == parser.binary_operator_kind.FORWARD_SLASH {
            return lhs / rhs
        } else if step.operator == parser.binary_operator_kind.STAR {
            return lhs * rhs
        } else if step.operator == parser.binary_operator_kind.DOUBLE_STAR {
            return lhs ** rhs
        } 
    }
}

export({
    "evaluate": evaluate,
})
